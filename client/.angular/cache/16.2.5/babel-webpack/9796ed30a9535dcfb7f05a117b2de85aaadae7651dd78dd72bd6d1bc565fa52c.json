{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { map, Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TournamentService {\n  constructor(http) {\n    this.http = http;\n  }\n  create(formValues) {\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"));\n    const name = formValues['name'];\n    const discipline = formValues['discipline'];\n    const maxTeams = formValues['maxTeams'];\n    const minTeams = formValues['minTeams'];\n    const startDate = formValues['startDate'];\n    const tournamentType = formValues['tournamentType'];\n    // Assuming 'image' is a File object\n    const image = formValues['image'];\n    return this.convertImageToByteArray(image).pipe(map(byteArray => {\n      const formData = new FormData();\n      formData.append('name', name);\n      formData.append('discipline', discipline);\n      formData.append('maxTeams', maxTeams.toString());\n      formData.append('minTeams', minTeams.toString());\n      formData.append('startDate', startDate.toISOString());\n      formData.append('tournamentType', tournamentType);\n      formData.append('image', new Blob([byteArray], {\n        type: image.type\n      }), image.name);\n      return this.http.post('http://localhost:8080/api/private/admin/tournament', formData, {\n        headers: headers\n      }).pipe(map(res => res.data));\n    }));\n  }\n  convertImageToByteArray(file) {\n    return new Observable(observer => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = () => {\n        const arrayBuffer = reader.result;\n        const uintArray = new Uint8Array(arrayBuffer);\n        observer.next(uintArray);\n        observer.complete();\n      };\n      reader.onerror = error => {\n        observer.error(error);\n      };\n    });\n  }\n  getTournament(id) {\n    return this.http.get('http://localhost:8080/api/open/tournament/' + id).pipe(map(res => res.data));\n  }\n  static #_ = this.ɵfac = function TournamentService_Factory(t) {\n    return new (t || TournamentService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TournamentService,\n    factory: TournamentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","map","Observable","TournamentService","constructor","http","create","formValues","headers","set","localStorage","getItem","name","discipline","maxTeams","minTeams","startDate","tournamentType","image","convertImageToByteArray","pipe","byteArray","formData","FormData","append","toString","toISOString","Blob","type","post","res","data","file","observer","reader","FileReader","readAsArrayBuffer","onload","arrayBuffer","result","uintArray","Uint8Array","next","complete","onerror","error","getTournament","id","get","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\services\\TournamentService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { map, Observable } from \"rxjs\";\nimport { ResponseData } from \"../models/ResponseData\";\nimport { TournamentRequestData } from \"../models/request/TournamentRequestData\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TournamentService {\n\n  constructor(private http: HttpClient) {}\n\n  public create(formValues: any): Observable<number> {\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"));\n\n    const name: string = formValues['name'];\n    const discipline: string = formValues['discipline'];\n    const maxTeams: number = formValues['maxTeams'];\n    const minTeams: number = formValues['minTeams'];\n    const startDate: Date = formValues['startDate'];\n    const tournamentType: string = formValues['tournamentType'];\n\n    // Assuming 'image' is a File object\n    const image: File = formValues['image'];\n\n    return this.convertImageToByteArray(image).pipe(\n      map(byteArray => {\n        const formData = new FormData();\n        formData.append('name', name);\n        formData.append('discipline', discipline);\n        formData.append('maxTeams', maxTeams.toString());\n        formData.append('minTeams', minTeams.toString());\n        formData.append('startDate', startDate.toISOString());\n        formData.append('tournamentType', tournamentType);\n        formData.append('image', new Blob([byteArray], { type: image.type }), image.name);\n\n        return this.http.post<ResponseData<number>>(\n          'http://localhost:8080/api/private/admin/tournament',\n          formData,\n          { headers: headers }\n        ).pipe(map(res => res.data));\n      })\n    );\n  }\n\n  private convertImageToByteArray(file: File): Observable<Uint8Array> {\n    return new Observable<Uint8Array>(observer => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = () => {\n        const arrayBuffer = reader.result as ArrayBuffer;\n        const uintArray = new Uint8Array(arrayBuffer);\n        observer.next(uintArray);\n        observer.complete();\n      };\n      reader.onerror = error => {\n        observer.error(error);\n      };\n    });\n  }\n\n  public getTournament(id: number | undefined): Observable<TournamentRequestData> {\n    return this.http.get<ResponseData<TournamentRequestData>>('http://localhost:8080/api/open/tournament/' + id)\n      .pipe(\n        map(res => res.data)\n      );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}