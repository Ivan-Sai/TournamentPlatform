{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { AsyncPipe, NgIf } from \"@angular/common\";\nexport let SignupComponent = class SignupComponent {\n  constructor(fb, service, router, authService, location) {\n    this.fb = fb;\n    this.service = service;\n    this.router = router;\n    this.authService = authService;\n    this.location = location;\n    this.passwordEquals = undefined;\n    this.form = this.fb.group({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      username: new FormControl(null, [Validators.required]),\n      password1: new FormControl(null, [Validators.required]),\n      password2: new FormControl(null, [Validators.required])\n    });\n  }\n  ngOnInit() {\n    this.form.valueChanges.subscribe(value => {\n      this.checkPasswordEquals(value['password1'], value['password2']);\n    });\n  }\n  onSubmit() {\n    if (this.form.valid) {\n      this.service.signup(this.form.value).subscribe(registerData => {\n        if (registerData && registerData['accessToken']) {\n          this.authService.setToken(registerData['accessToken']);\n          this.router.navigate(['/']).then(location.reload);\n        }\n      });\n    }\n  }\n  checkPasswordEquals(password1, password2) {\n    if (password1 !== null && password2 !== null) {\n      this.passwordEquals = password1 === password2;\n    }\n  }\n};\nSignupComponent = __decorate([Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  standalone: true,\n  imports: [ReactiveFormsModule, NgIf, AsyncPipe],\n  styleUrls: ['./signup.component.css']\n})], SignupComponent);","map":{"version":3,"names":["Component","FormControl","ReactiveFormsModule","Validators","AsyncPipe","NgIf","SignupComponent","constructor","fb","service","router","authService","location","passwordEquals","undefined","form","group","email","required","username","password1","password2","ngOnInit","valueChanges","subscribe","value","checkPasswordEquals","onSubmit","valid","signup","registerData","setToken","navigate","then","reload","__decorate","selector","templateUrl","standalone","imports","styleUrls"],"sources":["C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\pages\\signin\\signin.component.ts"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {AsyncPipe, Location, NgIf} from \"@angular/common\";\nimport {SignUpService} from \"../../services/SignUpService\";\nimport {Router} from \"@angular/router\";\n\nimport {AuthService} from \"../../services/AuthService\";\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule,\n    NgIf,\n    AsyncPipe,\n  ],\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit{\n\n  public passwordEquals: boolean | unknown= undefined ;\n\n  public token: string | undefined;\n\n  public form: FormGroup = this.fb.group({\n    email: new FormControl(null, [Validators.required,Validators.email]),\n    username: new FormControl(null, [Validators.required]),\n    password1: new FormControl(null, [Validators.required]),\n    password2: new FormControl(null, [Validators.required]),\n  });\n\n  constructor(private fb: FormBuilder,\n              private service: SignUpService,\n              private router: Router,\n              private authService: AuthService,\n              private location: Location) {\n  }\n\n  ngOnInit(): void {\n    this.form.valueChanges.subscribe(value => {\n      this.checkPasswordEquals(value['password1'],value['password2'])\n    })\n  }\n\n  onSubmit() {\n    if (this.form.valid) {\n      this.service.signup(this.form.value).subscribe(registerData => {\n        if(registerData && registerData['accessToken']) {\n          this.authService.setToken(registerData['accessToken']);\n          this.router.navigate(['/']).then(location.reload);\n        }\n      });\n    }\n  }\n\n  private checkPasswordEquals(password1:string, password2:string) {\n    if (password1 !== null && password2 !== null) {\n      this.passwordEquals = password1 === password2;\n    }\n  }\n\n}\n"],"mappings":";AAAA,SAAQA,SAAS,QAAe,eAAe;AAC/C,SAAqBC,WAAW,EAAaC,mBAAmB,EAAEC,UAAU,QAAO,gBAAgB;AACnG,SAAQC,SAAS,EAAYC,IAAI,QAAO,iBAAiB;AAiBlD,WAAMC,eAAe,GAArB,MAAMA,eAAe;EAa1BC,YAAoBC,EAAe,EACfC,OAAsB,EACtBC,MAAc,EACdC,WAAwB,EACxBC,QAAkB;IAJlB,KAAAJ,EAAE,GAAFA,EAAE;IACF,KAAAC,OAAO,GAAPA,OAAO;IACP,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,QAAQ,GAARA,QAAQ;IAfrB,KAAAC,cAAc,GAAqBC,SAAS;IAI5C,KAAAC,IAAI,GAAc,IAAI,CAACP,EAAE,CAACQ,KAAK,CAAC;MACrCC,KAAK,EAAE,IAAIhB,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACe,QAAQ,EAACf,UAAU,CAACc,KAAK,CAAC,CAAC;MACpEE,QAAQ,EAAE,IAAIlB,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACe,QAAQ,CAAC,CAAC;MACtDE,SAAS,EAAE,IAAInB,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACe,QAAQ,CAAC,CAAC;MACvDG,SAAS,EAAE,IAAIpB,WAAW,CAAC,IAAI,EAAE,CAACE,UAAU,CAACe,QAAQ,CAAC;KACvD,CAAC;EAOF;EAEAI,QAAQA,CAAA;IACN,IAAI,CAACP,IAAI,CAACQ,YAAY,CAACC,SAAS,CAACC,KAAK,IAAG;MACvC,IAAI,CAACC,mBAAmB,CAACD,KAAK,CAAC,WAAW,CAAC,EAACA,KAAK,CAAC,WAAW,CAAC,CAAC;IACjE,CAAC,CAAC;EACJ;EAEAE,QAAQA,CAAA;IACN,IAAI,IAAI,CAACZ,IAAI,CAACa,KAAK,EAAE;MACnB,IAAI,CAACnB,OAAO,CAACoB,MAAM,CAAC,IAAI,CAACd,IAAI,CAACU,KAAK,CAAC,CAACD,SAAS,CAACM,YAAY,IAAG;QAC5D,IAAGA,YAAY,IAAIA,YAAY,CAAC,aAAa,CAAC,EAAE;UAC9C,IAAI,CAACnB,WAAW,CAACoB,QAAQ,CAACD,YAAY,CAAC,aAAa,CAAC,CAAC;UACtD,IAAI,CAACpB,MAAM,CAACsB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,IAAI,CAACrB,QAAQ,CAACsB,MAAM,CAAC;;MAErD,CAAC,CAAC;;EAEN;EAEQR,mBAAmBA,CAACN,SAAgB,EAAEC,SAAgB;IAC5D,IAAID,SAAS,KAAK,IAAI,IAAIC,SAAS,KAAK,IAAI,EAAE;MAC5C,IAAI,CAACR,cAAc,GAAGO,SAAS,KAAKC,SAAS;;EAEjD;CAED;AA3CYf,eAAe,GAAA6B,UAAA,EAX3BnC,SAAS,CAAC;EACToC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CACPrC,mBAAmB,EACnBG,IAAI,EACJD,SAAS,CACV;EACDoC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWlC,eAAe,CA2C3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}