{"ast":null,"code":"import { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nexport class JwtUtil {\n  constructor() {\n    this.jwtHelper = new JwtHelperService();\n  }\n  decodeToken() {\n    const token = localStorage.getItem(\"accessToken\");\n    if (token) {\n      try {\n        const decodedToken = this.jwtHelper.decodeToken(token);\n        console.log(decodedToken);\n        return decodedToken;\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        return null;\n      }\n    }\n  }\n  getUsername() {\n    let decodedToken = this.decodeToken();\n    return decodedToken.sub;\n  }\n  static #_ = this.ɵfac = function JwtUtil_Factory(t) {\n    return new (t || JwtUtil)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtUtil,\n    factory: JwtUtil.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["JwtHelperService","JwtUtil","constructor","jwtHelper","decodeToken","token","localStorage","getItem","decodedToken","console","log","error","getUsername","sub","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\util\\JwtUtil.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JwtUtil {\r\n  jwtHelper: JwtHelperService;\r\n  constructor() {\r\n    this.jwtHelper = new JwtHelperService();\r\n  }\r\n\r\n    decodeToken() {\r\n      const token = localStorage.getItem(\"accessToken\");\r\n      if (token) {\r\n        try {\r\n          const decodedToken = this.jwtHelper.decodeToken(token);\r\n          console.log(decodedToken);\r\n          return decodedToken;\r\n        } catch (error) {\r\n          console.error('Error decoding token:', error);\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    getUsername(): string {\r\n      let decodedToken = this.decodeToken()\r\n      return decodedToken.sub;\r\n    }\r\n}\r\n"],"mappings":"AACA,SAAQA,gBAAgB,QAAO,oBAAoB;;AAKnD,OAAM,MAAOC,OAAO;EAElBC,YAAA;IACE,IAAI,CAACC,SAAS,GAAG,IAAIH,gBAAgB,EAAE;EACzC;EAEEI,WAAWA,CAAA;IACT,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACjD,IAAIF,KAAK,EAAE;MACT,IAAI;QACF,MAAMG,YAAY,GAAG,IAAI,CAACL,SAAS,CAACC,WAAW,CAACC,KAAK,CAAC;QACtDI,OAAO,CAACC,GAAG,CAACF,YAAY,CAAC;QACzB,OAAOA,YAAY;OACpB,CAAC,OAAOG,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,OAAO,IAAI;;;EAGjB;EACAC,WAAWA,CAAA;IACT,IAAIJ,YAAY,GAAG,IAAI,CAACJ,WAAW,EAAE;IACrC,OAAOI,YAAY,CAACK,GAAG;EACzB;EAAC,QAAAC,CAAA,G;qBAtBQb,OAAO;EAAA;EAAA,QAAAc,EAAA,G;WAAPd,OAAO;IAAAe,OAAA,EAAPf,OAAO,CAAAgB,IAAA;IAAAC,UAAA,EAFN;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}