{"ast":null,"code":"import { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/TokenService\";\nexport class JwtUtil {\n  constructor(authService) {\n    this.authService = authService;\n    this.jwtHelper = new JwtHelperService();\n  }\n  decodeToken() {\n    this.authService.getToken().subscribe(value => {\n      this.token = value;\n    });\n    if (this.token !== null) {\n      try {\n        return this.jwtHelper.decodeToken(this.token);\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        return null;\n      }\n    }\n  }\n  getUsername() {\n    return this.decodeToken().sub;\n  }\n  getRole() {\n    if (this.token != null) {\n      return this.decodeToken().role;\n    }\n    return null;\n  }\n  getId() {\n    if (this.token != null) {\n      return Number.parseInt(this.decodeToken().id);\n    }\n    return 0;\n  }\n  static #_ = this.ɵfac = function JwtUtil_Factory(t) {\n    return new (t || JwtUtil)(i0.ɵɵinject(i1.TokenService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtUtil,\n    factory: JwtUtil.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["JwtHelperService","JwtUtil","constructor","authService","jwtHelper","decodeToken","getToken","subscribe","value","token","error","console","getUsername","sub","getRole","role","getId","Number","parseInt","id","_","i0","ɵɵinject","i1","TokenService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\util\\JwtUtil.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\r\nimport {TokenService} from \"../services/TokenService\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JwtUtil {\r\n  private jwtHelper: JwtHelperService;\r\n  private token: string | any;\r\n\r\n  constructor(private authService: TokenService) {\r\n    this.jwtHelper = new JwtHelperService();\r\n  }\r\n\r\n  decodeToken() {\r\n    this.authService.getToken().subscribe(value => {\r\n      this.token = value\r\n    });\r\n    if (this.token !== null) {\r\n      try {\r\n        return this.jwtHelper.decodeToken(this.token);\r\n      } catch (error) {\r\n        console.error('Error decoding token:', error);\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  getUsername(): string {\r\n    return this.decodeToken().sub;\r\n  }\r\n\r\n  getRole(): string | null {\r\n    if (this.token != null) {\r\n      return this.decodeToken().role\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getId(): number | undefined {\r\n    if (this.token != null) {\r\n      return Number.parseInt(this.decodeToken().id)\r\n    }\r\n    return 0\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAQA,gBAAgB,QAAO,oBAAoB;;;AAMnD,OAAM,MAAOC,OAAO;EAIlBC,YAAoBC,WAAyB;IAAzB,KAAAA,WAAW,GAAXA,WAAW;IAC7B,IAAI,CAACC,SAAS,GAAG,IAAIJ,gBAAgB,EAAE;EACzC;EAEAK,WAAWA,CAAA;IACT,IAAI,CAACF,WAAW,CAACG,QAAQ,EAAE,CAACC,SAAS,CAACC,KAAK,IAAG;MAC5C,IAAI,CAACC,KAAK,GAAGD,KAAK;IACpB,CAAC,CAAC;IACF,IAAI,IAAI,CAACC,KAAK,KAAK,IAAI,EAAE;MACvB,IAAI;QACF,OAAO,IAAI,CAACL,SAAS,CAACC,WAAW,CAAC,IAAI,CAACI,KAAK,CAAC;OAC9C,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,OAAO,IAAI;;;EAGjB;EAEAE,WAAWA,CAAA;IACT,OAAO,IAAI,CAACP,WAAW,EAAE,CAACQ,GAAG;EAC/B;EAEAC,OAAOA,CAAA;IACL,IAAI,IAAI,CAACL,KAAK,IAAI,IAAI,EAAE;MACtB,OAAO,IAAI,CAACJ,WAAW,EAAE,CAACU,IAAI;;IAEhC,OAAO,IAAI;EACb;EAEAC,KAAKA,CAAA;IACH,IAAI,IAAI,CAACP,KAAK,IAAI,IAAI,EAAE;MACtB,OAAOQ,MAAM,CAACC,QAAQ,CAAC,IAAI,CAACb,WAAW,EAAE,CAACc,EAAE,CAAC;;IAE/C,OAAO,CAAC;EACV;EAAC,QAAAC,CAAA,G;qBAtCUnB,OAAO,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAPxB,OAAO;IAAAyB,OAAA,EAAPzB,OAAO,CAAA0B,IAAA;IAAAC,UAAA,EAFN;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}