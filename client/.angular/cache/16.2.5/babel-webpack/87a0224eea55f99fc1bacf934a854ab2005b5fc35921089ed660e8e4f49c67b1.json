{"ast":null,"code":"\"use strict\";\n\n// import {Component, OnInit} from '@angular/core';\n// import {NgIf} from \"@angular/common\";\n// import {FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators} from \"@angular/forms\";\n// import {\n//   declarationFunctions\n// } from \"@angular/compiler-cli/linker/src/file_linker/partial_linkers/partial_linker_selector\";\n//\n// @Component({\n//   selector: 'app-tournament-creation',\n//   standalone: true,\n//   templateUrl: './tournament-creation.component.html',\n//   imports: [\n//     NgIf,\n//     ReactiveFormsModule\n//   ],\n//   styleUrls: ['./tournament-creation.component.css']\n// })\n// export class TournamentCreationComponent implements OnInit{\n//\n//   public maxMin : boolean = true;\n//   public minCorrect: boolean = true;\n//   public maxCorrect: boolean = true;\n//   public dateBefore: boolean = true;\n//   public dateAfter: boolean = true;\n//   public minDate: string | undefined;\n//   public maxDate: string | undefined;\n//\n//   constructor(private fb: FormBuilder,\n//               ) {\n//   }\n//\n//   ngOnInit(): void {\n//     this.form.valueChanges.subscribe(value => {\n//       // this.minDate = new Date(new Date().getTime() + 15 * 60000).toLocaleString() ;\n//       // this.minDate = new Date(new Date().getFullYear(), new Date().getMonth() + 2, new Date().getDate()).toLocaleDateString();\n//       this.maxMin = this.maxMinCheck(value['maxTeams'],value['minTeams']);\n//       this.minCorrect = this.checkMinFormat(value['minTeams']);\n//       this.maxCorrect = this.checkMaxFormat(value['maxTeams']);\n//       this.dateCheck(value['startDate'])\n//     })\n//     }\n//\n//   public form: FormGroup = this.fb.group({\n//     name: new FormControl(null, [Validators.required]),\n//     discipline: new FormControl('Dota 2', Validators.required),\n//     maxTeams: new FormControl(null, [Validators.required, Validators.min(2), Validators.max(128)]),\n//     minTeams: new FormControl(null, [Validators.required, Validators.min(2), Validators.max(128)]),\n//     startDate: new FormControl(new Date(), [Validators.required]),\n//     tournamentType: new FormControl('SINGLE_ELIMINATION', Validators.required),\n//   });\n//\n//   private checkMinFormat(min: number) {\n//     if (min !== null){\n//       return !(min < 2 || min > 128)\n//     }\n//     return true\n//   }\n//   private checkMaxFormat(max: number) {\n//     if (max !== null){\n//       return !(max < 2 || max > 128)\n//     }\n//     return true\n//   }\n//   private maxMinCheck(max:number, min: number):boolean {\n//     if (max != null && min != null) return max>=min;\n//     return true\n//   }\n//\n//   private dateCheck(dateStr: Date ): void {\n//     if (dateStr !== null){\n//       const date = new Date(dateStr)\n//       const currentDate = new Date();\n//       const minDate = new Date(currentDate.getTime() + 15 * 60000); // текущая дата + 15 минут\n//       const maxDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 2, currentDate.getDate()); // текущая дата + 2 месяца\n//\n//       this.dateBefore = date >= minDate;\n//       this.dateAfter = date <= maxDate;\n//     }\n//   }\n//\n//   protected readonly declarationFunctions = declarationFunctions;\n// }","map":{"version":3,"names":[],"sources":["C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\pages\\admin\\tournament-creation\\tournament-creation.component.ts"],"sourcesContent":["// import {Component, OnInit} from '@angular/core';\n// import {NgIf} from \"@angular/common\";\n// import {FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators} from \"@angular/forms\";\n// import {\n//   declarationFunctions\n// } from \"@angular/compiler-cli/linker/src/file_linker/partial_linkers/partial_linker_selector\";\n//\n// @Component({\n//   selector: 'app-tournament-creation',\n//   standalone: true,\n//   templateUrl: './tournament-creation.component.html',\n//   imports: [\n//     NgIf,\n//     ReactiveFormsModule\n//   ],\n//   styleUrls: ['./tournament-creation.component.css']\n// })\n// export class TournamentCreationComponent implements OnInit{\n//\n//   public maxMin : boolean = true;\n//   public minCorrect: boolean = true;\n//   public maxCorrect: boolean = true;\n//   public dateBefore: boolean = true;\n//   public dateAfter: boolean = true;\n//   public minDate: string | undefined;\n//   public maxDate: string | undefined;\n//\n//   constructor(private fb: FormBuilder,\n//               ) {\n//   }\n//\n//   ngOnInit(): void {\n//     this.form.valueChanges.subscribe(value => {\n//       // this.minDate = new Date(new Date().getTime() + 15 * 60000).toLocaleString() ;\n//       // this.minDate = new Date(new Date().getFullYear(), new Date().getMonth() + 2, new Date().getDate()).toLocaleDateString();\n//       this.maxMin = this.maxMinCheck(value['maxTeams'],value['minTeams']);\n//       this.minCorrect = this.checkMinFormat(value['minTeams']);\n//       this.maxCorrect = this.checkMaxFormat(value['maxTeams']);\n//       this.dateCheck(value['startDate'])\n//     })\n//     }\n//\n//   public form: FormGroup = this.fb.group({\n//     name: new FormControl(null, [Validators.required]),\n//     discipline: new FormControl('Dota 2', Validators.required),\n//     maxTeams: new FormControl(null, [Validators.required, Validators.min(2), Validators.max(128)]),\n//     minTeams: new FormControl(null, [Validators.required, Validators.min(2), Validators.max(128)]),\n//     startDate: new FormControl(new Date(), [Validators.required]),\n//     tournamentType: new FormControl('SINGLE_ELIMINATION', Validators.required),\n//   });\n//\n//   private checkMinFormat(min: number) {\n//     if (min !== null){\n//       return !(min < 2 || min > 128)\n//     }\n//     return true\n//   }\n//   private checkMaxFormat(max: number) {\n//     if (max !== null){\n//       return !(max < 2 || max > 128)\n//     }\n//     return true\n//   }\n//   private maxMinCheck(max:number, min: number):boolean {\n//     if (max != null && min != null) return max>=min;\n//     return true\n//   }\n//\n//   private dateCheck(dateStr: Date ): void {\n//     if (dateStr !== null){\n//       const date = new Date(dateStr)\n//       const currentDate = new Date();\n//       const minDate = new Date(currentDate.getTime() + 15 * 60000); // текущая дата + 15 минут\n//       const maxDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 2, currentDate.getDate()); // текущая дата + 2 месяца\n//\n//       this.dateBefore = date >= minDate;\n//       this.dateAfter = date <= maxDate;\n//     }\n//   }\n//\n//   protected readonly declarationFunctions = declarationFunctions;\n// }\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}