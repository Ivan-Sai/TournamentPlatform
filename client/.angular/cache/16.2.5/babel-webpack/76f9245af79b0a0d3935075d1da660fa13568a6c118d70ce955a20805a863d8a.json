{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../util/JwtUtil\";\nexport class TeamService {\n  constructor(http, jwtUtil) {\n    this.http = http;\n    this.jwtUtil = jwtUtil;\n  }\n  getTeamLogo(teamId) {\n    return this.http.get('http://localhost:8080/api/open/team/' + teamId + '/logo');\n  }\n  createTeam(name, uploadImage) {\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"));\n    const formData = new FormData();\n    if (uploadImage) formData.append('image', uploadImage, uploadImage.name);\n    formData.append('name', name);\n    // @ts-ignore\n    formData.append('ownerId', this.jwtUtil.getId().toString());\n    return this.http.post('http://localhost:8080/api/private/personal/team', formData, {\n      headers: headers\n    });\n  }\n  findById(teamId) {\n    return this.http.get('http://localhost:8080/api/open/team/' + teamId);\n  }\n  setTeamLogo(image, teamId) {\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"));\n    const formData = new FormData();\n    if (image) formData.append('image', image, image.name);\n    return this.http.put('http://localhost:8080/api/private/personal/team/' + teamId + '/logo', formData, {\n      headers: headers\n    });\n  }\n  getUsersByTeam(teamId) {\n    return this.http.get('http://localhost:8080/api/open/team/' + teamId + '/users');\n  }\n  addUser(teamId, userId) {\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"));\n    return this.http.put('http://localhost:8080/api/private/personal/' + userId + '/inviteToTeam/' + teamId, {}, {\n      headers: headers\n    });\n  }\n  static #_ = this.ɵfac = function TeamService_Factory(t) {\n    return new (t || TeamService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtUtil));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TeamService,\n    factory: TeamService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","TeamService","constructor","http","jwtUtil","getTeamLogo","teamId","get","createTeam","name","uploadImage","headers","set","localStorage","getItem","formData","FormData","append","getId","toString","post","findById","setTeamLogo","image","put","getUsersByTeam","addUser","userId","_","i0","ɵɵinject","i1","HttpClient","i2","JwtUtil","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\services\\TeamService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\r\nimport {map, Observable} from \"rxjs\";\r\nimport {ResponseData} from \"../models/ResponseData\";\r\nimport {RegisterData} from \"../models/request/RegisterData\";\r\nimport {FormControl, Validators} from \"@angular/forms\";\r\nimport {JwtUtil} from \"../util/JwtUtil\";\r\nimport {TournamentRequestData} from \"../models/request/TournamentRequestData\";\r\nimport {ImageData} from \"../models/request/ImageData\";\r\nimport {AllTournamentRequestData} from \"../models/request/AllTournamentRequestData\";\r\nimport {TeamData} from \"../models/request/TeamData\";\r\nimport {UserData} from \"../models/request/UserData\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TeamService {\r\n\r\n  constructor(private http:HttpClient,\r\n              private jwtUtil: JwtUtil,\r\n  ) { }\r\n\r\n\r\n\r\n  getTeamLogo(teamId: number | undefined) {\r\n    return this.http.get<ImageData>('http://localhost:8080/api/open/team/' + teamId + '/logo')\r\n  }\r\n\r\n  createTeam(name: string, uploadImage: File | undefined) {\r\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"))\r\n    const formData = new FormData();\r\n    if (uploadImage) formData.append('image', uploadImage, uploadImage.name)\r\n    formData.append('name', name)\r\n    // @ts-ignore\r\n    formData.append('ownerId', this.jwtUtil.getId().toString())\r\n    return this.http.post<number>('http://localhost:8080/api/private/personal/team',formData,{headers: headers})\r\n  }\r\n\r\n  findById(teamId: number | undefined) {\r\n    return this.http.get<TeamData>('http://localhost:8080/api/open/team/'+teamId);\r\n  }\r\n\r\n  setTeamLogo(image: File | undefined, teamId: number | undefined) {\r\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"))\r\n\r\n    const formData = new FormData();\r\n    if (image) formData.append('image', image, image.name)\r\n    return this.http.put<ResponseData<any>>('http://localhost:8080/api/private/personal/team/'+ teamId +'/logo', formData, {headers: headers});\r\n  }\r\n\r\n  getUsersByTeam(teamId: number | undefined):Observable<UserData[]> {\r\n    return this.http.get<UserData[]>('http://localhost:8080/api/open/team/'+teamId + '/users');\r\n  }\r\n\r\n  addUser(teamId: number | undefined, userId: number | undefined) {\r\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"))\r\n    return this.http.put('http://localhost:8080/api/private/personal/' + userId +'/inviteToTeam/' + teamId, {},{headers: headers})\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;;;;AAe5D,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAe,EACfC,OAAgB;IADhB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,OAAO,GAAPA,OAAO;EACvB;EAIJC,WAAWA,CAACC,MAA0B;IACpC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAY,sCAAsC,GAAGD,MAAM,GAAG,OAAO,CAAC;EAC5F;EAEAE,UAAUA,CAACC,IAAY,EAAEC,WAA6B;IACpD,MAAMC,OAAO,GAAG,IAAIX,WAAW,EAAE,CAACY,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IACvG,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,IAAIN,WAAW,EAAEK,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEP,WAAW,EAAEA,WAAW,CAACD,IAAI,CAAC;IACxEM,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAER,IAAI,CAAC;IAC7B;IACAM,QAAQ,CAACE,MAAM,CAAC,SAAS,EAAE,IAAI,CAACb,OAAO,CAACc,KAAK,EAAE,CAACC,QAAQ,EAAE,CAAC;IAC3D,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAS,iDAAiD,EAACL,QAAQ,EAAC;MAACJ,OAAO,EAAEA;IAAO,CAAC,CAAC;EAC9G;EAEAU,QAAQA,CAACf,MAA0B;IACjC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAW,sCAAsC,GAACD,MAAM,CAAC;EAC/E;EAEAgB,WAAWA,CAACC,KAAuB,EAAEjB,MAA0B;IAC7D,MAAMK,OAAO,GAAG,IAAIX,WAAW,EAAE,CAACY,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IAEvG,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,IAAIO,KAAK,EAAER,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEM,KAAK,EAAEA,KAAK,CAACd,IAAI,CAAC;IACtD,OAAO,IAAI,CAACN,IAAI,CAACqB,GAAG,CAAoB,kDAAkD,GAAElB,MAAM,GAAE,OAAO,EAAES,QAAQ,EAAE;MAACJ,OAAO,EAAEA;IAAO,CAAC,CAAC;EAC5I;EAEAc,cAAcA,CAACnB,MAA0B;IACvC,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAa,sCAAsC,GAACD,MAAM,GAAG,QAAQ,CAAC;EAC5F;EAEAoB,OAAOA,CAACpB,MAA0B,EAAEqB,MAA0B;IAC5D,MAAMhB,OAAO,GAAG,IAAIX,WAAW,EAAE,CAACY,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IACvG,OAAO,IAAI,CAACX,IAAI,CAACqB,GAAG,CAAC,6CAA6C,GAAGG,MAAM,GAAE,gBAAgB,GAAGrB,MAAM,EAAE,EAAE,EAAC;MAACK,OAAO,EAAEA;IAAO,CAAC,CAAC;EAChI;EAAC,QAAAiB,CAAA,G;qBAzCU3B,WAAW,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,OAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXlC,WAAW;IAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}