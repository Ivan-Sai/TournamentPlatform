{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../util/JwtUtil\";\nexport class PersonalService {\n  constructor(http, jwtUtil) {\n    this.http = http;\n    this.jwtUtil = jwtUtil;\n  }\n  getTeamsByPersonal(id) {\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"));\n    return this.http.get('http://localhost:8080/api/private/personal/' + id + '/teams', {\n      headers: headers\n    });\n  }\n  getUserData(userId) {\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"));\n    return this.http.get('http://localhost:8080/api/open/user/' + userId, {\n      headers: headers\n    });\n  }\n  getAvatar(userId) {\n    return this.http.get('http://localhost:8080/api/open/user/' + userId + '/logo');\n  }\n  setPersonalAvatar(image, userId) {\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"));\n    const formData = new FormData();\n    if (image) formData.append('image', image, image.name);\n    return this.http.put('http://localhost:8080/api/private/personal/' + userId + '/avatar', formData, {\n      headers: headers\n    });\n  }\n  static #_ = this.ɵfac = function PersonalService_Factory(t) {\n    return new (t || PersonalService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtUtil));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PersonalService,\n    factory: PersonalService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","PersonalService","constructor","http","jwtUtil","getTeamsByPersonal","id","headers","set","localStorage","getItem","get","getUserData","userId","getAvatar","setPersonalAvatar","image","formData","FormData","append","name","put","_","i0","ɵɵinject","i1","HttpClient","i2","JwtUtil","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\services\\PersonalService.ts"],"sourcesContent":["import {HttpClient, HttpHeaders} from \"@angular/common/http\";\r\nimport {Injectable} from \"@angular/core\";\r\nimport {JwtUtil} from \"../util/JwtUtil\";\r\nimport {Observable} from \"rxjs\";\r\nimport {TeamData} from \"../models/request/TeamData\";\r\nimport {UserData} from \"../models/request/UserData\";\r\nimport {ImageData} from \"../models/request/ImageData\";\r\nimport {ResponseData} from \"../models/ResponseData\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PersonalService {\r\n\r\n  constructor(private http: HttpClient,\r\n              private jwtUtil: JwtUtil) {\r\n  }\r\n\r\n  getTeamsByPersonal(id: number | undefined): Observable<TeamData[]> {\r\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"))\r\n    return this.http.get<TeamData[]>('http://localhost:8080/api/private/personal/'+ id +'/teams',{headers: headers})\r\n  }\r\n\r\n  getUserData(userId: number | undefined) {\r\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"))\r\n    return this.http.get<UserData>('http://localhost:8080/api/open/user/'+ userId,{headers: headers})\r\n  }\r\n\r\n  getAvatar(userId: number | undefined) {\r\n    return this.http.get<ImageData>('http://localhost:8080/api/open/user/' + userId + '/logo')\r\n  }\r\n\r\n  setPersonalAvatar(image: File | undefined, userId: number | undefined) {\r\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"))\r\n\r\n    const formData = new FormData();\r\n    if (image) formData.append('image', image, image.name)\r\n    return this.http.put<ResponseData<any>>('http://localhost:8080/api/private/personal/'+ userId +'/avatar', formData, {headers: headers});\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAAoBA,WAAW,QAAO,sBAAsB;;;;AAY5D,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,IAAgB,EAChBC,OAAgB;IADhB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,OAAO,GAAPA,OAAO;EAC3B;EAEAC,kBAAkBA,CAACC,EAAsB;IACvC,MAAMC,OAAO,GAAG,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IACvG,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAa,6CAA6C,GAAEL,EAAE,GAAE,QAAQ,EAAC;MAACC,OAAO,EAAEA;IAAO,CAAC,CAAC;EAClH;EAEAK,WAAWA,CAACC,MAA0B;IACpC,MAAMN,OAAO,GAAG,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IACvG,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAW,sCAAsC,GAAEE,MAAM,EAAC;MAACN,OAAO,EAAEA;IAAO,CAAC,CAAC;EACnG;EAEAO,SAASA,CAACD,MAA0B;IAClC,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAY,sCAAsC,GAAGE,MAAM,GAAG,OAAO,CAAC;EAC5F;EAEAE,iBAAiBA,CAACC,KAAuB,EAAEH,MAA0B;IACnE,MAAMN,OAAO,GAAG,IAAIP,WAAW,EAAE,CAACQ,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IAEvG,MAAMO,QAAQ,GAAG,IAAIC,QAAQ,EAAE;IAC/B,IAAIF,KAAK,EAAEC,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEH,KAAK,EAAEA,KAAK,CAACI,IAAI,CAAC;IACtD,OAAO,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAoB,6CAA6C,GAAER,MAAM,GAAE,SAAS,EAAEI,QAAQ,EAAE;MAACV,OAAO,EAAEA;IAAO,CAAC,CAAC;EACzI;EAAC,QAAAe,CAAA,G;qBA1BUrB,eAAe,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,OAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAf5B,eAAe;IAAA6B,OAAA,EAAf7B,eAAe,CAAA8B,IAAA;IAAAC,UAAA,EAFd;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}