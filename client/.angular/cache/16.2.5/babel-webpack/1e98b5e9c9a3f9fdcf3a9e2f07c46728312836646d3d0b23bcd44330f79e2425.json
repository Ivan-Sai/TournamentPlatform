{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nimport { JwtHelperService } from \"@auth0/angular-jwt\";\nimport { AuthService } from \"../services/AuthService\";\nexport let JwtUtil = class JwtUtil {\n  constructor(authService = AuthService) {\n    this.authService = authService;\n    this.jwtHelper = new JwtHelperService();\n  }\n  decodeToken() {\n    const token = localStorage.getItem(\"accessToken\");\n    if (token) {\n      try {\n        const decodedToken = this.jwtHelper.decodeToken(token);\n        console.log(decodedToken);\n        return decodedToken;\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        return null;\n      }\n    }\n  }\n  getUsername() {\n    let decodedToken = this.decodeToken();\n    return decodedToken.sub;\n  }\n};\nJwtUtil = __decorate([Injectable({\n  providedIn: 'root'\n})], JwtUtil);","map":{"version":3,"names":["Injectable","JwtHelperService","AuthService","JwtUtil","constructor","authService","jwtHelper","decodeToken","token","localStorage","getItem","decodedToken","console","log","error","getUsername","sub","__decorate","providedIn"],"sources":["C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\util\\JwtUtil.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\r\nimport {AuthService} from \"../services/AuthService\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JwtUtil {\r\n  jwtHelper: JwtHelperService;\r\n  constructor(private authService = AuthService) {\r\n    this.jwtHelper = new JwtHelperService();\r\n  }\r\n\r\n    decodeToken() {\r\n      const token = localStorage.getItem(\"accessToken\");\r\n      if (token) {\r\n        try {\r\n          const decodedToken = this.jwtHelper.decodeToken(token);\r\n          console.log(decodedToken);\r\n          return decodedToken;\r\n        } catch (error) {\r\n          console.error('Error decoding token:', error);\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    getUsername(): string {\r\n      let decodedToken = this.  decodeToken()\r\n      return decodedToken.sub;\r\n    }\r\n}\r\n"],"mappings":";AAAA,SAAQA,UAAU,QAAO,eAAe;AACxC,SAAQC,gBAAgB,QAAO,oBAAoB;AACnD,SAAQC,WAAW,QAAO,yBAAyB;AAK5C,WAAMC,OAAO,GAAb,MAAMA,OAAO;EAElBC,YAAoBC,WAAA,GAAcH,WAAW;IAAzB,KAAAG,WAAW,GAAXA,WAAW;IAC7B,IAAI,CAACC,SAAS,GAAG,IAAIL,gBAAgB,EAAE;EACzC;EAEEM,WAAWA,CAAA;IACT,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACjD,IAAIF,KAAK,EAAE;MACT,IAAI;QACF,MAAMG,YAAY,GAAG,IAAI,CAACL,SAAS,CAACC,WAAW,CAACC,KAAK,CAAC;QACtDI,OAAO,CAACC,GAAG,CAACF,YAAY,CAAC;QACzB,OAAOA,YAAY;OACpB,CAAC,OAAOG,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,OAAO,IAAI;;;EAGjB;EACAC,WAAWA,CAAA;IACT,IAAIJ,YAAY,GAAG,IAAI,CAAGJ,WAAW,EAAE;IACvC,OAAOI,YAAY,CAACK,GAAG;EACzB;CACH;AAvBYb,OAAO,GAAAc,UAAA,EAHnBjB,UAAU,CAAC;EACVkB,UAAU,EAAE;CACb,CAAC,C,EACWf,OAAO,CAuBnB"},"metadata":{},"sourceType":"module","externalDependencies":[]}