{"ast":null,"code":"import { FormControl, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { NgIf } from \"@angular/common\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/SignUpService\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../services/AuthService\";\nfunction SignupComponent_p_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 14);\n    i0.ɵɵtext(1, \"*User with email already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SignupComponent_p_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 14);\n    i0.ɵɵtext(1, \"*User with username already exists\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SignupComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtext(1, \" *Passwords do not match \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class SignupComponent {\n  constructor(fb, service, router, authService) {\n    this.fb = fb;\n    this.service = service;\n    this.router = router;\n    this.authService = authService;\n    this.passwordEquals = undefined;\n    this.form = this.fb.group({\n      email: new FormControl(null, [Validators.required, Validators.email]),\n      username: new FormControl(null, [Validators.required]),\n      password1: new FormControl(null, [Validators.required]),\n      password2: new FormControl(null, [Validators.required])\n    });\n    this.errorMessage = '';\n  }\n  ngOnInit() {\n    this.form.valueChanges.subscribe(value => {\n      this.checkPasswordEquals(value['password1'], value['password2']);\n    });\n  }\n  onSubmit() {\n    if (this.form.valid) {\n      this.service.signup(this.form.value).subscribe(registerData => {\n        if (registerData && registerData['accessToken']) {\n          this.authService.setToken(registerData['accessToken']);\n          this.router.navigate(['/']).then(() => {\n            location.reload;\n          });\n        }\n      }, error => {\n        if (error.error) {\n          this.errorMessage = error.error;\n        }\n      });\n    }\n  }\n  checkPasswordEquals(password1, password2) {\n    if (password1 !== null && password2 !== null) {\n      this.passwordEquals = password1 === password2;\n    }\n  }\n  static #_ = this.ɵfac = function SignupComponent_Factory(t) {\n    return new (t || SignupComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.SignUpService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.AuthService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SignupComponent,\n    selectors: [[\"app-signup\"]],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 26,\n    vars: 5,\n    consts: [[1, \"flex\", \"flex-col\", \"items-center\", \"w-full\", \"bg-sky-950\", \"justify-center\", 2, \"height\", \"calc(100vh - 5rem)\"], [1, \"flex\", \"flex-col\", \"bg-white\", \"rounded\", \"w-4/12\", \"p-4\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"inputEmail\", 1, \"form-label\"], [\"formControlName\", \"email\", \"type\", \"email\", \"id\", \"inputEmail\", \"aria-describedby\", \"emailHelp\", 1, \"border-blue-300\", \"form-control\"], [\"id\", \"emailHelp\", 1, \"form-text\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"inputUsername\", 1, \"form-label\"], [\"formControlName\", \"username\", \"type\", \"text\", \"id\", \"inputUsername\", \"aria-describedby\", \"emailHelp\", 1, \"border-blue-300\", \"form-control\"], [\"for\", \"inputPassword1\", 1, \"form-label\"], [\"formControlName\", \"password1\", \"type\", \"password\", \"id\", \"inputPassword1\", 1, \"border-blue-300\", \"form-control\"], [\"for\", \"inputPassword2\", 1, \"form-label\"], [\"formControlName\", \"password2\", \"type\", \"password\", \"id\", \"inputPassword2\", 1, \"border-blue-300\", \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"bg-sky-700\", 3, \"disabled\"], [1, \"text-danger\"]],\n    template: function SignupComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainerStart(0);\n        i0.ɵɵelementStart(1, \"div\", 0)(2, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function SignupComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"label\", 3);\n        i0.ɵɵtext(5, \"Email address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 4);\n        i0.ɵɵelementStart(7, \"div\", 5);\n        i0.ɵɵtext(8, \"We'll never share your email with anyone else.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, SignupComponent_p_9_Template, 2, 0, \"p\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 7);\n        i0.ɵɵtext(12, \"Username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"input\", 8);\n        i0.ɵɵtemplate(14, SignupComponent_p_14_Template, 2, 0, \"p\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 2)(16, \"label\", 9);\n        i0.ɵɵtext(17, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"div\", 2)(20, \"label\", 11);\n        i0.ɵɵtext(21, \"Confirm password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"input\", 12);\n        i0.ɵɵtemplate(23, SignupComponent_div_23_Template, 2, 0, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"button\", 13);\n        i0.ɵɵtext(25, \"Submit\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementContainerEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage === \"User with email already exists\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage === \"User with username already exists\");\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordEquals == false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.form.invalid || !ctx.passwordEquals);\n      }\n    },\n    dependencies: [ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, NgIf],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["FormControl","ReactiveFormsModule","Validators","NgIf","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","SignupComponent","constructor","fb","service","router","authService","passwordEquals","undefined","form","group","email","required","username","password1","password2","errorMessage","ngOnInit","valueChanges","subscribe","value","checkPasswordEquals","onSubmit","valid","signup","registerData","setToken","navigate","then","location","reload","error","_","ɵɵdirectiveInject","i1","FormBuilder","i2","SignUpService","i3","Router","i4","AuthService","_2","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","SignupComponent_Template","rf","ctx","ɵɵelementContainerStart","ɵɵlistener","SignupComponent_Template_form_ngSubmit_2_listener","ɵɵelement","ɵɵtemplate","SignupComponent_p_9_Template","SignupComponent_p_14_Template","SignupComponent_div_23_Template","ɵɵelementContainerEnd","ɵɵadvance","ɵɵproperty","invalid","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","styles"],"sources":["C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\pages\\signup\\signup.component.ts","C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\pages\\signup\\signup.component.html"],"sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, ReactiveFormsModule, Validators} from \"@angular/forms\";\nimport {AsyncPipe, Location, NgIf} from \"@angular/common\";\nimport {SignUpService} from \"../../services/SignUpService\";\nimport {Router} from \"@angular/router\";\n\nimport {AuthService} from \"../../services/AuthService\";\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  standalone: true,\n  imports: [\n    ReactiveFormsModule,\n    NgIf,\n    AsyncPipe,\n  ],\n  styleUrls: ['./signup.component.css']\n})\nexport class SignupComponent implements OnInit{\n\n  public passwordEquals: boolean | unknown= undefined ;\n\n  public token: string | undefined;\n\n  public form: FormGroup = this.fb.group({\n    email: new FormControl(null, [Validators.required,Validators.email]),\n    username: new FormControl(null, [Validators.required]),\n    password1: new FormControl(null, [Validators.required]),\n    password2: new FormControl(null, [Validators.required]),\n  });\n  public errorMessage: string = '';\n\n  constructor(private fb: FormBuilder,\n              private service: SignUpService,\n              private router: Router,\n              private authService: AuthService,\n              ) {\n  }\n\n  ngOnInit(): void {\n        this.form.valueChanges.subscribe(value => {\n          this.checkPasswordEquals(value['password1'],value['password2'])\n        })\n    }\n\n  onSubmit() {\n    if (this.form.valid) {\n      this.service.signup(this.form.value).subscribe(registerData => {\n        if(registerData && registerData['accessToken']) {\n          this.authService.setToken(registerData['accessToken']);\n          this.router.navigate(['/']).then(() => {\n            location.reload;\n          });\n        }\n      },\n        error => {\n          if (error.error) {\n            this.errorMessage = error.error;\n          }\n        }\n      );\n    }\n  }\n  private checkPasswordEquals(password1:string, password2:string) {\n    if (password1 !== null && password2 !== null) {\n      this.passwordEquals = password1 === password2;\n    }\n  }\n\n}\n","<ng-container>\n  <div class=\"flex flex-col items-center w-full bg-sky-950 justify-center\" style=\"height: calc(100vh - 5rem)\">\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"flex flex-col bg-white rounded w-4/12 p-4\">\n<!--      <h1 *ngIf=\"token\">{{token}}</h1>-->\n      <div class=\"mb-3\">\n        <label for=\"inputEmail\" class=\"form-label\">Email address</label>\n        <input formControlName=\"email\" type=\"email\" class=\"border-blue-300 form-control\" id=\"inputEmail\" aria-describedby=\"emailHelp\">\n        <div id=\"emailHelp\" class=\"form-text\">We'll never share your email with anyone else.</div>\n        <p class=\"text-danger\" *ngIf=\"errorMessage === 'User with email already exists'\">*User with email already exists</p>\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"inputUsername\" class=\"form-label\">Username</label>\n        <input formControlName=\"username\" type=\"text\" class=\"border-blue-300 form-control\" id=\"inputUsername\" aria-describedby=\"emailHelp\">\n        <p class=\"text-danger\" *ngIf=\"errorMessage === 'User with username already exists'\">*User with username already exists</p>\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"inputPassword1\" class=\"form-label\">Password</label>\n        <input formControlName=\"password1\" type=\"password\" class=\"border-blue-300  form-control\" id=\"inputPassword1\">\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"inputPassword2\" class=\"form-label\">Confirm password</label>\n        <input formControlName=\"password2\" type=\"password\" class=\"border-blue-300  form-control\" id=\"inputPassword2\">\n        <div class=\"text-danger\" *ngIf=\"this.passwordEquals == false\">\n          *Passwords do not match\n        </div>\n      </div>\n\n      <button type=\"submit\" class=\"btn btn-primary bg-sky-700\" [disabled]=\"form.invalid  || !this.passwordEquals \">Submit</button>\n    </form>\n  </div>\n</ng-container>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}