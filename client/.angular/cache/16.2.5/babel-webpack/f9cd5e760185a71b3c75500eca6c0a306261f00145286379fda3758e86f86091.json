{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { map, Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../util/JwtUtil\";\nexport class TournamentService {\n  constructor(http, jwtUtil) {\n    this.http = http;\n    this.jwtUtil = jwtUtil;\n  }\n  create(formValues) {\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"));\n    const name = formValues['name'];\n    const discipline = formValues['discipline'];\n    const maxTeams = formValues['maxTeams'];\n    const minTeams = formValues['minTeams'];\n    const startDate = formValues['startDate'];\n    const tournamentType = formValues['tournamentType'];\n    const adminId = this.jwtUtil.getId();\n    const image = formValues['image'];\n    return this.http.post('http://localhost:8080/api/private/admin/tournament', {\n      name,\n      discipline,\n      maxTeams,\n      minTeams,\n      startDate,\n      adminId,\n      tournamentType,\n      image\n    }, {\n      headers: headers\n    }).pipe(map(res => res.data));\n  }\n  getTournament(id) {\n    return this.http.get('http://localhost:8080/api/open/tournament/' + id).pipe(map(res => res.data));\n  }\n  convertImageToByteArray(file) {\n    return new Observable(observer => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = () => {\n        const arrayBuffer = reader.result;\n        const uintArray = new Uint8Array(arrayBuffer);\n        observer.next(uintArray);\n        observer.complete();\n      };\n      reader.onerror = error => {\n        observer.error(error);\n      };\n    });\n  }\n  static #_ = this.ɵfac = function TournamentService_Factory(t) {\n    return new (t || TournamentService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtUtil));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TournamentService,\n    factory: TournamentService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","map","Observable","TournamentService","constructor","http","jwtUtil","create","formValues","headers","set","localStorage","getItem","name","discipline","maxTeams","minTeams","startDate","tournamentType","adminId","getId","image","post","pipe","res","data","getTournament","id","get","convertImageToByteArray","file","observer","reader","FileReader","readAsArrayBuffer","onload","arrayBuffer","result","uintArray","Uint8Array","next","complete","onerror","error","_","i0","ɵɵinject","i1","HttpClient","i2","JwtUtil","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\services\\TournamentService.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {map, Observable} from \"rxjs\";\nimport {ResponseData} from \"../models/ResponseData\";\nimport {RegisterData} from \"../models/request/RegisterData\";\nimport {FormControl, Validators} from \"@angular/forms\";\nimport {JwtUtil} from \"../util/JwtUtil\";\nimport {TournamentRequestData} from \"../models/request/TournamentRequestData\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TournamentService {\n\n  constructor(private http:HttpClient,\n              private jwtUtil: JwtUtil,\n  ) { }\n\n\n  public create(formValues: any): Observable<number> {\n    const headers = new HttpHeaders().set(\"Authorization\", \"Bearer \" + localStorage.getItem(\"accessToken\"))\n\n    const name: string = formValues['name'];\n    const discipline: string = formValues['discipline'];\n    const maxTeams: number = formValues['maxTeams'];\n    const minTeams: number = formValues['minTeams'];\n    const startDate: Date = formValues['startDate'];\n    const tournamentType: string = formValues['tournamentType'];\n    const adminId :number | undefined= this.jwtUtil.getId();\n    const image: File = formValues['image'];\n\n    return this.http.post<ResponseData<number>>('http://localhost:8080/api/private/admin/tournament', {\n      name, discipline, maxTeams, minTeams, startDate, adminId,tournamentType,image\n    },{headers: headers}).pipe(\n      map(res => res.data)\n    )\n  }\n\n  public getTournament(id:number | undefined): Observable<TournamentRequestData> {\n    return this.http.get<ResponseData<TournamentRequestData>>('http://localhost:8080/api/open/tournament/' + id)\n      .pipe(\n        map(res => res.data)\n      )\n  }\n\n  private convertImageToByteArray(file: File): Observable<Uint8Array> {\n    return new Observable<Uint8Array>(observer => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = () => {\n        const arrayBuffer = reader.result as ArrayBuffer;\n        const uintArray = new Uint8Array(arrayBuffer);\n        observer.next(uintArray);\n        observer.complete();\n      };\n      reader.onerror = error => {\n        observer.error(error);\n      };\n    });\n  }\n}\n"],"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;AAC5D,SAAQC,GAAG,EAAEC,UAAU,QAAO,MAAM;;;;AAUpC,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,IAAe,EACfC,OAAgB;IADhB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,OAAO,GAAPA,OAAO;EACvB;EAGGC,MAAMA,CAACC,UAAe;IAC3B,MAAMC,OAAO,GAAG,IAAIT,WAAW,EAAE,CAACU,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IAEvG,MAAMC,IAAI,GAAWL,UAAU,CAAC,MAAM,CAAC;IACvC,MAAMM,UAAU,GAAWN,UAAU,CAAC,YAAY,CAAC;IACnD,MAAMO,QAAQ,GAAWP,UAAU,CAAC,UAAU,CAAC;IAC/C,MAAMQ,QAAQ,GAAWR,UAAU,CAAC,UAAU,CAAC;IAC/C,MAAMS,SAAS,GAAST,UAAU,CAAC,WAAW,CAAC;IAC/C,MAAMU,cAAc,GAAWV,UAAU,CAAC,gBAAgB,CAAC;IAC3D,MAAMW,OAAO,GAAsB,IAAI,CAACb,OAAO,CAACc,KAAK,EAAE;IACvD,MAAMC,KAAK,GAASb,UAAU,CAAC,OAAO,CAAC;IAEvC,OAAO,IAAI,CAACH,IAAI,CAACiB,IAAI,CAAuB,oDAAoD,EAAE;MAChGT,IAAI;MAAEC,UAAU;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,SAAS;MAAEE,OAAO;MAACD,cAAc;MAACG;KACzE,EAAC;MAACZ,OAAO,EAAEA;IAAO,CAAC,CAAC,CAACc,IAAI,CACxBtB,GAAG,CAACuB,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CACrB;EACH;EAEOC,aAAaA,CAACC,EAAqB;IACxC,OAAO,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAAsC,4CAA4C,GAAGD,EAAE,CAAC,CACzGJ,IAAI,CACHtB,GAAG,CAACuB,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CACrB;EACL;EAEQI,uBAAuBA,CAACC,IAAU;IACxC,OAAO,IAAI5B,UAAU,CAAa6B,QAAQ,IAAG;MAC3C,MAAMC,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC/BD,MAAM,CAACE,iBAAiB,CAACJ,IAAI,CAAC;MAC9BE,MAAM,CAACG,MAAM,GAAG,MAAK;QACnB,MAAMC,WAAW,GAAGJ,MAAM,CAACK,MAAqB;QAChD,MAAMC,SAAS,GAAG,IAAIC,UAAU,CAACH,WAAW,CAAC;QAC7CL,QAAQ,CAACS,IAAI,CAACF,SAAS,CAAC;QACxBP,QAAQ,CAACU,QAAQ,EAAE;MACrB,CAAC;MACDT,MAAM,CAACU,OAAO,GAAGC,KAAK,IAAG;QACvBZ,QAAQ,CAACY,KAAK,CAACA,KAAK,CAAC;MACvB,CAAC;IACH,CAAC,CAAC;EACJ;EAAC,QAAAC,CAAA,G;qBA/CUzC,iBAAiB,EAAA0C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,OAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBhD,iBAAiB;IAAAiD,OAAA,EAAjBjD,iBAAiB,CAAAkD,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}