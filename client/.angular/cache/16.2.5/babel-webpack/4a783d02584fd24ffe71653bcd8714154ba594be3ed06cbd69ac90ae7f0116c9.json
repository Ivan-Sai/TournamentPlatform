{"ast":null,"code":"import { JwtHelperService } from \"@auth0/angular-jwt\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/AuthService\";\nexport class JwtUtil {\n  constructor(authService) {\n    this.authService = authService;\n    this.jwtHelper = new JwtHelperService();\n  }\n  decodeToken() {\n    const token = this.authService.getToken();\n    if (token) {\n      try {\n        const decodedToken = this.jwtHelper.decodeToken(token);\n        console.log(decodedToken);\n        return decodedToken;\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        return null;\n      }\n    }\n  }\n  getUsername() {\n    let decodedToken = this.decodeToken();\n    return decodedToken.sub;\n  }\n  static #_ = this.ɵfac = function JwtUtil_Factory(t) {\n    return new (t || JwtUtil)(i0.ɵɵinject(i1.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: JwtUtil,\n    factory: JwtUtil.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["JwtHelperService","JwtUtil","constructor","authService","jwtHelper","decodeToken","token","getToken","decodedToken","console","log","error","getUsername","sub","_","i0","ɵɵinject","i1","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Ivan\\java\\final_project\\client\\src\\app\\util\\JwtUtil.ts"],"sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\r\nimport {AuthService} from \"../services/AuthService\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JwtUtil {\r\n  jwtHelper: JwtHelperService;\r\n  constructor(private authService:AuthService) {\r\n    this.jwtHelper = new JwtHelperService();\r\n  }\r\n\r\n    decodeToken() {\r\n      const token = this.authService.getToken();\r\n      if (token) {\r\n        try {\r\n          const decodedToken = this.jwtHelper.decodeToken(token);\r\n          console.log(decodedToken);\r\n          return decodedToken;\r\n        } catch (error) {\r\n          console.error('Error decoding token:', error);\r\n          return null;\r\n        }\r\n      }\r\n    }\r\n    getUsername(): string {\r\n      let decodedToken = this.decodeToken()\r\n      return decodedToken.sub;\r\n    }\r\n}\r\n"],"mappings":"AACA,SAAQA,gBAAgB,QAAO,oBAAoB;;;AAMnD,OAAM,MAAOC,OAAO;EAElBC,YAAoBC,WAAuB;IAAvB,KAAAA,WAAW,GAAXA,WAAW;IAC7B,IAAI,CAACC,SAAS,GAAG,IAAIJ,gBAAgB,EAAE;EACzC;EAEEK,WAAWA,CAAA;IACT,MAAMC,KAAK,GAAG,IAAI,CAACH,WAAW,CAACI,QAAQ,EAAE;IACzC,IAAID,KAAK,EAAE;MACT,IAAI;QACF,MAAME,YAAY,GAAG,IAAI,CAACJ,SAAS,CAACC,WAAW,CAACC,KAAK,CAAC;QACtDG,OAAO,CAACC,GAAG,CAACF,YAAY,CAAC;QACzB,OAAOA,YAAY;OACpB,CAAC,OAAOG,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,OAAO,IAAI;;;EAGjB;EACAC,WAAWA,CAAA;IACT,IAAIJ,YAAY,GAAG,IAAI,CAACH,WAAW,EAAE;IACrC,OAAOG,YAAY,CAACK,GAAG;EACzB;EAAC,QAAAC,CAAA,G;qBAtBQb,OAAO,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAPlB,OAAO;IAAAmB,OAAA,EAAPnB,OAAO,CAAAoB,IAAA;IAAAC,UAAA,EAFN;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}