{"ast":null,"code":"import { NgIf } from \"@angular/common\";\nimport { FormControl, ReactiveFormsModule, Validators } from \"@angular/forms\";\nimport { declarationFunctions } from \"@angular/compiler-cli/linker/src/file_linker/partial_linkers/partial_linker_selector\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nfunction TournamentCreationComponent_p_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 19);\n    i0.ɵɵtext(1, \"*Min teams must be between 2 and 128\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TournamentCreationComponent_p_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 19);\n    i0.ɵɵtext(1, \"*Maximum teams must be equal or bigger then minimum\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TournamentCreationComponent_p_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 19);\n    i0.ɵɵtext(1, \"*Max teams must be between 2 and 128\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction TournamentCreationComponent_p_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"*Min start date \", ctx_r3.minDate, \"\");\n  }\n}\nexport let TournamentCreationComponent = /*#__PURE__*/(() => {\n  class TournamentCreationComponent {\n    constructor(fb) {\n      this.fb = fb;\n      this.maxMin = true;\n      this.minCorrect = true;\n      this.maxCorrect = true;\n      this.dateBefore = true;\n      this.dateAfter = true;\n      this.form = this.fb.group({\n        name: new FormControl(null, [Validators.required]),\n        discipline: new FormControl('Dota 2', Validators.required),\n        maxTeams: new FormControl(null, [Validators.required, Validators.min(2), Validators.max(128)]),\n        minTeams: new FormControl(null, [Validators.required, Validators.min(2), Validators.max(128)]),\n        startDate: new FormControl(new Date(), [Validators.required]),\n        tournamentType: new FormControl('SINGLE_ELIMINATION', Validators.required)\n      });\n      this.declarationFunctions = declarationFunctions;\n    }\n    ngOnInit() {\n      this.form.valueChanges.subscribe(value => {\n        this.minDate = new Date(new Date().getTime() + 15 * 60000).toLocaleString();\n        // this.minDate = new Date(new Date().getFullYear(), new Date().getMonth() + 2, new Date().getDate()).toLocaleDateString();\n        this.maxMin = this.maxMinCheck(value['maxTeams'], value['minTeams']);\n        this.minCorrect = this.checkMinFormat(value['minTeams']);\n        this.maxCorrect = this.checkMaxFormat(value['maxTeams']);\n        this.dateCheck(value['startDate']);\n      });\n    }\n    checkMinFormat(min) {\n      if (min !== null) {\n        return !(min < 2 || min > 128);\n      }\n      return true;\n    }\n    checkMaxFormat(max) {\n      if (max !== null) {\n        return !(max < 2 || max > 128);\n      }\n      return true;\n    }\n    maxMinCheck(max, min) {\n      if (max != null && min != null) return max >= min;\n      return true;\n    }\n    dateCheck(dateStr) {\n      if (dateStr !== null) {\n        const date = new Date(dateStr);\n        const currentDate = new Date();\n        const minDate = new Date(currentDate.getTime() + 15 * 60000); // текущая дата + 15 минут\n        const maxDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 2, currentDate.getDate()); // текущая дата + 2 месяца\n        this.dateBefore = date >= minDate;\n        this.dateAfter = date <= maxDate;\n      }\n    }\n    static #_ = this.ɵfac = function TournamentCreationComponent_Factory(t) {\n      return new (t || TournamentCreationComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TournamentCreationComponent,\n      selectors: [[\"app-tournament-creation\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 45,\n      vars: 16,\n      consts: [[1, \"flex\", \"flex-col\", \"items-center\", \"w-full\", \"bg-sky-950\", \"justify-center\", 2, \"min-height\", \"calc(100vh - 5rem)\"], [1, \"flex\", \"flex-col\", \"bg-white\", \"rounded\", \"w-4/12\", \"p-4\", 3, \"formGroup\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [\"formControlName\", \"name\", \"max\", \"50\", \"type\", \"text\", \"id\", \"name\", \"aria-describedby\", \"name\", 1, \"border-blue-300\", \"form-control\"], [\"for\", \"discipline\", 1, \"form-label\"], [\"id\", \"discipline\", \"formControlName\", \"discipline\", \"aria-label\", \"Discipline\", 1, \"form-select\", \"border-blue-300\"], [3, \"value\", \"selected\"], [\"for\", \"minTeams\", 1, \"form-label\"], [\"formControlName\", \"minTeams\", \"type\", \"number\", \"id\", \"minTeams\", \"aria-describedby\", \"maxTeams\", 1, \"border-blue-300\", \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"maxTeams\", 1, \"form-label\"], [\"formControlName\", \"maxTeams\", \"min\", \"2\", \"type\", \"number\", \"id\", \"maxTeams\", \"aria-describedby\", \"maxTeams\", 1, \"border-blue-300\", \"form-control\"], [\"for\", \"startDate\", 1, \"form-label\"], [\"formControlName\", \"startDate\", \"type\", \"datetime-local\", \"id\", \"startDate\", \"aria-describedby\", \"maxTeams\", 1, \"border-blue-300\", \"form-control\"], [\"for\", \"tournamentType\", 1, \"form-label\"], [\"id\", \"tournamentType\", \"formControlName\", \"tournamentType\", \"aria-label\", \"tournamentType\", 1, \"form-select\", \"border-blue-300\"], [3, \"value\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"bg-sky-700\", 3, \"disabled\"], [1, \"text-danger\"]],\n      template: function TournamentCreationComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementContainerStart(0);\n          i0.ɵɵelementStart(1, \"div\", 0)(2, \"form\", 1)(3, \"div\", 2)(4, \"label\", 3);\n          i0.ɵɵtext(5, \"Tournament name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(6, \"input\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\", 2)(8, \"label\", 5);\n          i0.ɵɵtext(9, \"Tournament discipline\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"select\", 6)(11, \"option\", 7);\n          i0.ɵɵtext(12, \"Dota 2\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(13, \"option\", 7);\n          i0.ɵɵtext(14, \"CS 2\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"option\", 7);\n          i0.ɵɵtext(16, \"Apex\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(17, \"div\", 2)(18, \"label\", 8);\n          i0.ɵɵtext(19, \"Minimum teams in tournament\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(20, \"input\", 9);\n          i0.ɵɵtemplate(21, TournamentCreationComponent_p_21_Template, 2, 0, \"p\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(22, \"div\", 2)(23, \"label\", 11);\n          i0.ɵɵtext(24, \"Maximum teams in tournament\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(25, \"input\", 12);\n          i0.ɵɵtemplate(26, TournamentCreationComponent_p_26_Template, 2, 0, \"p\", 10);\n          i0.ɵɵtemplate(27, TournamentCreationComponent_p_27_Template, 2, 0, \"p\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(28, \"div\", 2)(29, \"label\", 13);\n          i0.ɵɵtext(30, \"Start date\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(31, \"input\", 14);\n          i0.ɵɵtemplate(32, TournamentCreationComponent_p_32_Template, 2, 1, \"p\", 10);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(33, \"div\", 2)(34, \"label\", 15);\n          i0.ɵɵtext(35, \"Tournament type\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(36, \"select\", 16)(37, \"option\", 7);\n          i0.ɵɵtext(38, \"Single Elimination\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(39, \"option\", 17);\n          i0.ɵɵtext(40, \"Double Elimination\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(41, \"option\", 17);\n          i0.ɵɵtext(42, \"Round robin\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(43, \"button\", 18);\n          i0.ɵɵtext(44, \"Submit\");\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementContainerEnd();\n        }\n        if (rf & 2) {\n          let tmp_12_0;\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"formGroup\", ctx.form);\n          i0.ɵɵadvance(9);\n          i0.ɵɵproperty(\"value\", \"Dota 2\")(\"selected\", ctx.form.value[\"discipline\"] === \"Dota 2\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"value\", \"CS 2\")(\"selected\", ctx.form.value[\"discipline\"] === \"CS 2\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"value\", \"Apex\")(\"selected\", ctx.form.value[\"discipline\"] === \"Apex\");\n          i0.ɵɵadvance(6);\n          i0.ɵɵproperty(\"ngIf\", !ctx.minCorrect);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", !ctx.maxMin);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.maxCorrect);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"ngIf\", !ctx.dateBefore);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"value\", \"SINGLE_ELIMINATION\")(\"selected\", ((tmp_12_0 = ctx.form.get(\"tournamentType\")) == null ? null : tmp_12_0.value) === \"SINGLE_ELIMINATION\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"value\", \"DOUBLE_ELIMINATION\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"value\", \"Round Robin\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"disabled\", ctx.form.invalid);\n        }\n      },\n      dependencies: [NgIf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MinValidator, i1.FormGroupDirective, i1.FormControlName]\n    });\n  }\n  return TournamentCreationComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}